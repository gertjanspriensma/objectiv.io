import { tagLink } from "@objectiv-analytics/tracker-browser";
import React, { useEffect, useState } from 'react';
import { scrollToAnchor } from "../scroll-to-anchor/scrollToAnchor";
import baseUrl from "@generated/docusaurus.config"


const SphinxPage = (props) => {
    const [data, setData] = useState('loading');

    // map from sphinx css selector to style and/or class in Docusaurus (classic theme)
    const styleMap = {
        'c':  {'class': 'token comment', 'style': 'color: rgb(153, 153, 136); font-style: italic;'}, // Comment
        'c1': {'class': 'token comment', 'style': 'color: rgb(153, 153, 136); font-style: italic;'},   // Comment
        'fm': {'class': 'token function', 'style': 'color: rgb(130, 170, 255);'},                   // class method
        'gh': {'class': 'token plain'},                                                             // generic header (out)
        'go': {'class': 'token comment', 'style': 'color: rgb(153, 153, 136); font-style: italic;'},// generic output
        'gp': {'class': 'token plain'},                                                             // generic prompt (in)
        'k':  {'class': 'token keyword', 'style': 'font-style: italic'},                            // keyword
        'kc': {'class': 'token boolean', 'style': 'color: rgb(54, 172, 170);'},                     // boolean
        'kn': {'class': 'token keyword', 'style': 'font-style: italic'},                            // keyword namespace
        'mi': {'class': 'token number', 'style': 'color: rgb(54, 172, 170);'},                     // literal number integer
        'n':  {'class': 'token plain'},                                                             // name
        'nb': {'class': 'token builtin', 'style': 'color: rgb(130, 170, 255);'},                    // builtin in type
        'nd': {'class': 'token decorator annotation punctuation', 'style': 'color: rgb(199, 146, 234);'}, // decorator
        'nc': {'class': 'token class-name', 'style': 'color: rgb(255, 203, 107);'},                 // class name
        'nf': {'class': 'token function', 'style': 'color: rgb(130, 170, 255);'},                   // function
        'nn': {'class': 'token plain'},                                                             // namespace
        'o':  {'class': 'token operator', 'style': 'color: rgb(57, 58, 52);'},                   // operator
        'ow': {'class': 'token keyword', 'style': 'font-style: italic'},                   // operator word
        'p':  {'class': 'token punctuation', 'style': 'color: rgb(199, 146, 234);'},                // punctuation
        'sd': {'class': 'token triple-quoted-string string', 'style': 'color: rgb(195, 232, 141);'},// triple quoted string
        's1': {'class': 'token string', 'style': 'color: rgb(227, 17, 108);'}                      // string
    };

    useEffect(() => {
       const url = props.url.replace('modeling', '_modeling');
        // first we load the HTML fragment as generated by Sphinx
        fetch(url)
          .then(response => {
                return response.text()
            })
          .then(raw => {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = raw;

                // get base from window.location, should be something like https://objectiv.io, or http://localhost:3000
                const currentSite = window.location.toString().match(/^(http[s]?:\/\/[a-z0-9.:]+\/).*?$/);

                // fix anchors (remove .html) and fix path
                Object.values(tempDiv.getElementsByTagName('a')).forEach( a => {
                    // a link is internal if the first part matches the current location,
                    // or if it's a relative URL
                    const isInternal = ((currentSite[1] !== undefined && a.href.startsWith(currentSite[1])) ||
                        !a.href.startsWith('http'));
                    // fix the hrefs in the overview/index page in case of missing trailing slash
                    if ( url == `${baseUrl.baseUrl}_modeling/intro.html` && isInternal ){
                        if ( a.href.indexOf('modeling') == -1){
                            // we add the baseURL to the match, to make sure it works in dev and prod mode
                            const regex = `^(http[s]?://[a-z0-9:.]+${baseUrl.baseUrl})(.*?)$`.replace('\\', '\\\/');
                            a.href = a.href.replace(new RegExp(regex), '$1modeling/$2');
                        }
                    }
                    // only remove the .html if local links, leave external links alone
                    if ( isInternal ){
                        a.href = a.href.replace(/\.html/g, '');

                        // fix content of (internal) permalinks, change from ¶ to #
                        if ( a.className == 'headerlink' && a.text == '¶' ){
                            a.text = '#';
                        }
                    }
                });

                // fix #anchors
                // we do this, by finding sections with a header
                // and moving the id to the heading rather than the section
                const sections = tempDiv.getElementsByTagName('section');
                Object.values(sections).forEach( (section: HTMLElement) => {

                    const originalId = section.id;
                    // move id's from sections to headers, otherwise # anchors won't work
                    ['h1', 'h2', 'h3'].every(heading_type => {
                        const headings = section.getElementsByTagName(heading_type);
                        if ( headings.length > 0 ){
                            // move ID to the actual heading
                            section.id = '_' + originalId;
                            headings[0].id = originalId;
                            headings[0].className = "sphinxAnchor";

                            // stop the loop if we are successful
                            return false;
                        }
                        return true;
                    });
                });
                // now fix the links/anchors in a <dt id="some_id">
                const dts = tempDiv.getElementsByTagName('dt');
                Object.values(dts).forEach( (dt: HTMLElement) => {
                  if ( dt.id != null ){
                      dt.className = dt.className + " sphinxAnchor";
                  }
                });

                // map styles of tokens (spans)
                const tokens = tempDiv.querySelectorAll("div.highlight pre span");
                Object.values(tokens).forEach((token: HTMLElement) => {
                    const className = token.className;
                    if ( className in styleMap ){
                        const props = styleMap[className];
                        
                        if ( props != undefined ) {
                            // override class
                            if ( 'class' in props ){
                                token.className = props['class'];
                            }
                            // override style
                            if ( 'style' in props ){
                                const styles = props.style.split(';');
                                Object.values(styles).forEach( (style: string) => {
                                    let [styleName, styleValue] = style.split(':');
                                    token.style.setProperty(styleName, styleValue)
                                });
                            }
                        }
                    }
                });
                
                // code blocks are in a <pre> inside a <div>
                // we keep the old class, and add the Docusaurus ones
                Object.values(tempDiv.querySelectorAll("div.highlight pre")).forEach( (codeBlock: HTMLElement) => {
                    const old = codeBlock.className;
                    codeBlock.className = old + " prism-code language-python codeBlock_node_modules-@docusaurus-theme-classic-lib-next-theme-CodeBlock-styles-module thin-scrollbar";

                    codeBlock.style.setProperty('color', "rgb(57, 58, 52)");
                    codeBlock.style.setProperty('background-color', "rgb(246, 248, 250)");
                    codeBlock.style.setProperty('padding', "var(--ifm-pre-padding)");

                    const code = document.createElement("code");
                    code.className = "codeBlockLines_node_modules-@docusaurus-theme-classic-lib-next-theme-CodeBlock-styles-module";
                    code.style.setProperty("color", "rgb(57, 58, 52)");
                    
                    // get lines
                    const lines = codeBlock.innerHTML.split("\n");
                    
                    /*
                    * Typical structure of a syntax highlighted code fragment is as follow:
                    * <div class="highlight">
                    *   <pre>
                    *      <span>token</span
                    * 
                    * Structure in Docusaurus is slightly different:
                    * <div>
                    *   <pre>
                    *     <code>
                    *       <span class="token-line">
                    *          <span>token</span>
                    * 
                    * Code below transforms the Sphinx structure into the Docusaurus one
                    */
                    Object.values(lines).forEach( line => {
                        const codeLine = document.createElement("span");
                        codeLine.className = 'token-line';
                        if ( line.length == 0 ){
                            // this is simply a span for a newline
                            const emptyLine = document.createElement("span");
                            emptyLine.innerHTML = "\n\n";
                            emptyLine.className = "token plain";
                            emptyLine.style.setProperty("display", "inline-block");
                            codeLine.appendChild(emptyLine);
                        } else {
                            codeLine.innerHTML = line + "\n";
                        }
                        code.appendChild(codeLine);
                    });
                    // remove current lines
                    while ( codeBlock.lastChild ){
                        codeBlock.removeChild(codeBlock.lastChild);
                    }
                    // and replace with new <code> block
                    codeBlock.appendChild(code);
                });

                // map background of code block
                Object.values(tempDiv.querySelectorAll("div.highlight")).forEach( (codeBlockContainer: HTMLElement) => {
                    const old = codeBlockContainer.className;
                    codeBlockContainer.className = old + " codeBlockContent_node_modules-@docusaurus-theme-classic-lib-next-theme-CodeBlock-styles-module python";
                });

                // tag dynamically created playground link, if present
                const playgroundLinkElement = tempDiv.querySelector('a[href^="https://notebook.objectiv.io/"]');
                if (playgroundLinkElement) {
                    const playgroundLinkTag = tagLink({
                        id: 'notebook-product-analytics',
                        href: 'https://notebook.objectiv.io/',
                        text: 'sandboxed notebook',
                        options: {
                            trackClicks: {
                                waitUntilTracked: true
                            }
                        }
                    })

                    // Apply attributes manually (Idea to make this in a new API for WP or other old school websites?)
                    for (let [key, value] of Object.entries<string>(playgroundLinkTag)) {
                        playgroundLinkElement.setAttribute(key, value);
                    }
                }

                const data = tempDiv.innerHTML;
                setData(data)
            })
          .then(() => {
              scrollToAnchor();
          });
    }, [])

    return (<div dangerouslySetInnerHTML={{ __html: data}} />);
}
export default SphinxPage;
